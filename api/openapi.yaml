openapi: 3.0.4
info:
  title: Shoplist API
  description: |-
    Official OpenAPI specification for the Shoplist API

    Some useful links:
    - [Swagger Editor](https://editor.swagger.io/)
  contact:
    url: https://github.com/jkutkut/shoplist
  license:
    name: GPL 3.0
    url: https://github.com/jkutkut/shoplist/blob/main/LICENSE
  version: 1.3.0
servers:
  - url: http://localhost/api
paths:
  /v1/user/{user_id}:
    delete:
      summary: Delete user
      description: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/register/basic:
    post:
      summary: Register user with username and password
      description: Register user with basic authentication and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                email:
                  $ref: '#/components/schemas/name'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: User registered, JWT token returned
          headers:
            set-cookie:
              schema:
                $ref: '#/components/schemas/bearer-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/jwt'
        '401':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/login/basic:
    post:
      summary: Login user with username and password
      description: Login user with basic authentication and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/name'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Login success, JWT token returned
          headers:
            set-cookie:
              schema:
                $ref: '#/components/schemas/bearer-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/jwt'
        '401':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  # /v1/user/create:
  # /v1/user/logout:
  # /v1/user/logout/all:

components:
  # TODO: add minLength and maxLength
  schemas:
    # Auth
    jwt:
      type: string
      description: JWT token
    bearer-token:
      type: string
      description: Bearer token
      example: Bearer <jwt token>
    # Common
    uuid:
      type: string
      format: uuid
      description: A 128-bit number encoded as a string.
      minLength: 36
      maxLength: 36
    name:
      type: string
      example: Marvin
    password:
      type: string
      example: please-change-me
    # v0 --------------------------------------------------
    description:
      type: string
      nullable: true
      minLength: 0
      maxLength: 255
    image:
      type: string
      nullable: true
      description: A URL to an image representing the entity.
    created_at:
      type: string
      format: date-time
      description: The date and time when the entity was created.
      example: 1970-01-01T00:00:00Z
    updated_at:
      type: string
      format: date-time
      description: The date and time when the entity was last updated.
      example: 1970-01-01T00:00:00Z
    created_by:
      allOf:
        - $ref: '#/components/schemas/uuid'
        - description: The ID of the user who created the entity.
    updated_by:
      allOf:
        - $ref: '#/components/schemas/uuid'
        - description: The ID of the user who last updated the entity.
    metadata:
      type: object
      description: Additional metadata about the entity.
      properties:
        created_by:
          $ref: '#/components/schemas/created_by'
        updated_by:
          $ref: '#/components/schemas/updated_by'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    result:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: The HTTP status code.
          example: 401
        message:
          type: string
          description: A message describing the error.
          example: Invalid credentials
    team:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
            description:
              $ref: '#/components/schemas/description'
            image:
              $ref: '#/components/schemas/image'
        - $ref: '#/components/schemas/metadata'
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
        image:
          $ref: '#/components/schemas/image'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    role:
      type: string
      description: Role of the user in the team
      example: admin
    user_team_roles:
      type: array
      items:
        type: object
        properties:
          team:
            $ref: '#/components/schemas/team'
          role:
            $ref: '#/components/schemas/role'
    tag:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
    product_obj:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        team_id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
        description:
          $ref: '#/components/schemas/description'
        image:
          $ref: '#/components/schemas/image'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
    product_metadata:
      type: object
      properties:
        generic:
          $ref: '#/components/schemas/product_obj'
          required: false
        brands:
          type: array
          items:
            $ref: '#/components/schemas/product_obj'
        identifiers:
          type: array
          items:
            description: identifier that can be used to identify a product
            type: string
    product:
      allOf:
        - $ref: '#/components/schemas/product_obj'
        - $ref: '#/components/schemas/metadata'
        - $ref: '#/components/schemas/product_metadata'
    list:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            team_id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
            description:
              $ref: '#/components/schemas/description'
            image:
              $ref: '#/components/schemas/image'
        - $ref: '#/components/schemas/metadata'
    category:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            list_id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
        - $ref: '#/components/schemas/metadata'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
