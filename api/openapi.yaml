openapi: 3.0.4
info:
  title: Shoplist API
  description: |-
    Official OpenAPI specification for the Shoplist API

    Some useful links:
    - [Swagger Editor](https://editor.swagger.io/)
  contact:
    url: https://github.com/jkutkut/shoplist
  license:
    name: GPL 3.0
    url: https://github.com/jkutkut/shoplist/blob/main/LICENSE
  version: 1.7.0
servers:
  - url: http://localhost/api
paths:
  /v1/user/{user_id}:
    get:
      summary: Get user info
      description: Get user info by user ID
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: User info returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Delete user
      description: Delete user
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/register/basic:
    post:
      summary: Register user with username and password
      description: Register user with basic authentication and return JWT token
      tags:
        - user_credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                email:
                  $ref: '#/components/schemas/name'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: User registered, JWT token returned
          headers:
            set-cookie:
              schema:
                $ref: '#/components/schemas/bearer-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/jwt'
        '401':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/login/basic:
    post:
      summary: Login user with username and password
      description: Login user with basic authentication and return JWT token
      tags:
        - user_credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/name'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Login success, JWT token returned
          headers:
            set-cookie:
              schema:
                $ref: '#/components/schemas/bearer-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/jwt'
        '401':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/login/basic/password:
    post:
      summary: Change password of user
      description: Change password of user by user ID. If user_id is not the current user, superuser permissions are required.
      tags:
        - user_credentials
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/uuid'
                new_password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Password changed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/me:
    get:
      summary: Get current user info
      description: Get current user info based on JWT token
      tags:
        - user_credentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/me/token:
    post:
      summary: Refresh JWT token
      description: Refresh JWT token for current user by invalidating the current token and returning a new one
      tags:
        - user_credentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed, new JWT token returned
          headers:
            set-cookie:
              schema:
                $ref: '#/components/schemas/bearer-token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/jwt'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/logout:
    post:
      summary: Logout current user
      description: Logout current user by invalidating the current JWT token
      tags:
        - user_credentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/logout/{user_id}:
    post:
      summary: Logout user by user ID
      description: Logout user by invalidating all JWT tokens for the given user ID
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Logout success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/logout/everyone:
    post:
      summary: Logout all users
      description: Logout all users by invalidating all JWT tokens
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/user/superuser/{user_id}:
    post:
      summary: Set user as superuser
      description: Set user as superuser by user ID. Requires superuser permissions.
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: User set as superuser
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Remove superuser from user
      description: Remove superuser from user by user ID. Requires superuser permissions.
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Superuser removed from user
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'

  /v1/team:
    post:
      summary: Create team
      description: Create a new team
      tags:
        - team
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                description:
                  $ref: '#/components/schemas/description'
                image:
                  $ref: '#/components/schemas/image'
      responses:
        '200':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/{team_id}:
    put:
      summary: Update team
      description: Update a team by team ID
      tags:
        - team
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                description:
                  $ref: '#/components/schemas/description'
                image:
                  $ref: '#/components/schemas/image'
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Delete team
      description: Delete a team by team ID
      tags:
        - team
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/roles:
    get:
      summary: Get user team roles
      description: Get all teams and roles of the current user
      tags:
        - user_credentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User team roles returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_team_roles'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/{team_id}/members:
    get:
      summary: Get team members
      description: Get all members of a team by team ID
      tags:
        - team
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team members returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/user'
                    role:
                      $ref: '#/components/schemas/role'
    put:
      summary: Add or update team members
      description: Add or update members of a team by team ID
      tags:
        - team
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  user_id:
                    $ref: '#/components/schemas/uuid'
                  role:
                    $ref: '#/components/schemas/role'
      responses:
        '200':
          description: Team member added
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/{team_id}/member/{user_id}:
    delete:
      summary: Remove team member
      description: Remove a member from a team by team ID
      tags:
        - team
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team member removed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  
  /v1/team/{team_id}/tags:
    get:
      summary: Get team tags
      description: Get all tags of a team by team ID
      tags:
        - tag
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team tags returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    post:
      summary: Create team tags
      description: Create tags for a team by team ID
      tags:
        - tag
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/name'
      responses:
        '200':
          description: Team tags created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/tag/{tag_id}:
    delete:
      summary: Delete team tag
      description: Delete a tag from a team by team ID and tag ID
      tags:
        - tag
      security:
        - bearerAuth: []
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team tag deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'

  /v1/team/{team_id}/products:
    get:
      summary: Get team products
      description: Get all products of a team by team ID with pagination
      tags:
        - product
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Team products returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/{team_id}/product:
    post:
      summary: Create team product
      description: Create a new product for a team by team ID
      tags:
        - product
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: Team product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/product/{product_id}:
    put:
      summary: Update team product
      description: Update a product of a team by team ID and product ID
      tags:
        - product
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: Team product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Delete team product
      description: Delete a product from a team by team ID and product ID
      tags:
        - product
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team product deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/product/{product_id}/tags:
    post:
      summary: Add tags to product
      description: Add tags to a product by product ID
      tags:
        - tag
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  tag_id:
                    $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Tags added to product
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Product or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/product/{product_id}/tag/{tag_id}:
    delete:
      summary: Remove tag from product
      description: Remove a tag from a product by product ID and tag ID
      tags:
        - tag
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: tag_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Tag removed from product
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Product or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'

  /v1/team/{team_id}/lists:
    get:
      summary: Get team lists
      description: Get all lists of a team by team ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team lists returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/list'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/team/{team_id}/list:
    post:
      summary: Create team list
      description: Create a new list for a team by team ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                description:
                  $ref: '#/components/schemas/description'
                image:
                  $ref: '#/components/schemas/image'
      responses:
        '200':
          description: Team list created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/list/{list_id}:
    put:
      summary: Update team list
      description: Update a list of a team by team ID and list ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                description:
                  $ref: '#/components/schemas/description'
                image:
                  $ref: '#/components/schemas/image'
      responses:
        '200':
          description: Team list updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Delete team list
      description: Delete a list from a team by team ID and list ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Team list deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'

  /v1/list/{list_id}/categories:
    get:
      summary: Get list categories
      description: Get all categories of a list by list ID
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: List categories returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/list/{list_id}/category:
    post:
      summary: Create list categories
      description: Create categories for a list by list ID
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/name'
      responses:
        '200':
          description: List categories created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/category/{category_id}:
    put:
      summary: Update list category
      description: Update a category of a list by list ID and category ID
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
      responses:
        '200':
          description: List category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Delete list category
      description: Delete a category from a list by list ID and category ID
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: List category deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: Team or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'

  /v1/list/{list_id}/products:
    get:
      summary: Get list products
      description: Get all products of a list by list
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: List products returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/list_product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
  /v1/list/{list_id}/products/{product_id}:
    put:
      summary: Add or update product in list
      description: Add or update a product in a list by list ID and product ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  $ref: '#/components/schemas/uuid'
                amount:
                  type: integer
                  format: int32
                  minimum: 1
                  default: 1
                units:
                  type: string
                  example: euros
      responses:
        '200':
          description: Product added or updated in list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    delete:
      summary: Remove product from list
      description: Remove a product from a list by list ID and product ID
      tags:
        - list
      security:
        - bearerAuth: []
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: product_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: Product removed from list
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '401':
          description: Invalid credentials, user not found, not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '404':
          description: List or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
components:
  # TODO: add minLength and maxLength
  schemas:
    # Auth
    jwt:
      type: string
      description: JWT token
    bearer-token:
      type: string
      description: Bearer token
      example: Bearer <jwt token>
    # Common
    uuid:
      type: string
      format: uuid
      description: A 128-bit number encoded as a string.
      minLength: 36
      maxLength: 36
    name:
      type: string
      example: Marvin
    password:
      type: string
      example: please-change-me
    # v0 --------------------------------------------------
    description:
      type: string
      nullable: true
      minLength: 0
      maxLength: 255
    image:
      type: string
      nullable: true
      description: A URL to an image representing the entity.
    created_at:
      type: string
      format: date-time
      description: The date and time when the entity was created.
      example: 1970-01-01T00:00:00Z
    updated_at:
      type: string
      format: date-time
      description: The date and time when the entity was last updated.
      example: 1970-01-01T00:00:00Z
    created_by:
      allOf:
        - $ref: '#/components/schemas/uuid'
        - description: The ID of the user who created the entity.
    updated_by:
      allOf:
        - $ref: '#/components/schemas/uuid'
        - description: The ID of the user who last updated the entity.
    metadata:
      type: object
      description: Additional metadata about the entity.
      properties:
        created_by:
          $ref: '#/components/schemas/created_by'
        updated_by:
          $ref: '#/components/schemas/updated_by'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    # v1 --------------------------------------------------
    result:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: The HTTP status code.
          example: 401
        message:
          type: string
          description: A message describing the error.
          example: Invalid credentials
    team:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
            description:
              $ref: '#/components/schemas/description'
            image:
              $ref: '#/components/schemas/image'
        - $ref: '#/components/schemas/metadata'
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
        image:
          $ref: '#/components/schemas/image'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    role:
      type: string
      description: Role of the user in the team
      example: admin
    user_team_roles:
      type: array
      items:
        type: object
        properties:
          team:
            $ref: '#/components/schemas/team'
          role:
            $ref: '#/components/schemas/role'
    tag:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
    product_obj:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        team_id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
        description:
          $ref: '#/components/schemas/description'
        image:
          $ref: '#/components/schemas/image'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
    product_metadata:
      type: object
      properties:
        generic:
          $ref: '#/components/schemas/product_obj'
          required: false
        brands:
          type: array
          items:
            $ref: '#/components/schemas/product_obj'
        identifiers:
          type: array
          items:
            description: identifier that can be used to identify a product
            type: string
    product:
      allOf:
        - $ref: '#/components/schemas/product_obj'
        - $ref: '#/components/schemas/metadata'
        - $ref: '#/components/schemas/product_metadata'
    list:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            team_id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
            description:
              $ref: '#/components/schemas/description'
            image:
              $ref: '#/components/schemas/image'
        - $ref: '#/components/schemas/metadata'
    category:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/uuid'
            list_id:
              $ref: '#/components/schemas/uuid'
            name:
              $ref: '#/components/schemas/name'
        - $ref: '#/components/schemas/metadata'
    list_product:
      type: object
      properties:
        product_id:
          $ref: '#/components/schemas/uuid'
        category_id:
          $ref: '#/components/schemas/uuid'
        amount:
          type: integer
          format: int32
          minimum: 1
          default: 1
        units:
          type: string
          example: euros
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
